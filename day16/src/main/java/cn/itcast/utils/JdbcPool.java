package cn.itcast.utils;

import java.io.PrintWriter;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.logging.Logger;

import javax.sql.DataSource;

/**
 *  自定义连接池要实现DataSource接口 ,  
 *  DataSource 又继承了 CommonDataSource, Wrapper接口
 */
public class JdbcPool implements DataSource {

	private static LinkedList<Connection> list = new LinkedList<Connection>();
	private static Properties config = new Properties();
	
	static{
		try {
			config.load(JdbcPool.class.getClassLoader().getResourceAsStream("db.properties"));
			Class.forName(config.getProperty("driver"));
			for(int i=0;i<10;i++){
				//这里接住的是具体的connection实现类了 MySQL的或者Oracle的
				Connection conn = DriverManager.getConnection(config.getProperty("url"), config.getProperty("username"), config.getProperty("password"));
				list.add(conn);
			}
		} catch (Exception e) {
			throw new ExceptionInInitializerError(e);
		}
	}
	
	
	//conn.close()
	/** 在实际开发，发现对象的方法满足不了开发需求时，有三种方式对其进行增强
	 * 1.写一个connecton子类，覆盖close方法，增强close方法
	 * 2.用包装设计模式  (采用了)
	 * 3.用动态代理    aop 面向切面编程    ,这个最厉害
	 */
	@Override
	public Connection getConnection() throws SQLException {
		if(list.size()<=0){
			throw new RuntimeException("数据库忙，请稍会再来！！");
		}
							//get()的话只是返回的引用
		Connection conn = list.removeFirst();   //MySQLconnection(不是接口了)   C   
		MyConnection my = new MyConnection(conn);
 		return my;      //my的其它方法-preparedStatment、commit、createStatement 没有增强
	}

	
	/**  包装设计模式
		 1.定义一个类，实现与被增强相同的接口
		 2.在类中定义一个变量，记住被增强对象
		 3.定义一个构造函数，接收被增强对象
		 4.覆盖想增强的方法
		 5.对于不想增强的方法，直接调用目标对象（被增强对象）的方法
	 */
	class MyConnection implements Connection {
		
		private Connection conn;
		//构造方法，接收一个connection
		public MyConnection(Connection conn){
			this.conn = conn;
		}
		
		/** 覆盖想增强的方法 */
		public void close(){
			list.add(this.conn);
		}
		
		/** 对于不想增强的方法，直接调用目标对象(被增强对象)的方法 
		    	下面太多就不一一写了
	     */
		public void clearWarnings() throws SQLException {
			this.conn.clearWarnings();
		}
		
		public void commit() throws SQLException {
			this.conn.commit();
		}
		
		public Statement createStatement() throws SQLException {
			return this.conn.createStatement();
		}
		
		public Statement createStatement(int resultSetType,
				int resultSetConcurrency, int resultSetHoldability)
				throws SQLException {
			return this.conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
		}
		
		public Statement createStatement(int resultSetType,
				int resultSetConcurrency) throws SQLException {
			return this.conn.createStatement(resultSetType,resultSetConcurrency);
		}
		public boolean getAutoCommit() throws SQLException {
			return this.conn.getAutoCommit();
		}
		public String getCatalog() throws SQLException {
			return this.conn.getCatalog();
		}
		public int getHoldability() throws SQLException {
			return 0;
		}
		public DatabaseMetaData getMetaData() throws SQLException {
			return null;
		}
		public int getTransactionIsolation() throws SQLException {
			return 0;
		}
		public Map<String, Class<?>> getTypeMap() throws SQLException {
			return null;
		}
		public SQLWarning getWarnings() throws SQLException {
			return null;
		}
		public boolean isClosed() throws SQLException {
			return false;
		}
		public boolean isReadOnly() throws SQLException {
			return false;
		}
		public String nativeSQL(String sql) throws SQLException {
			return null;
		}
		public CallableStatement prepareCall(String sql, int resultSetType,
				int resultSetConcurrency, int resultSetHoldability)
				throws SQLException {
			return null;
		}
		public CallableStatement prepareCall(String sql, int resultSetType,
				int resultSetConcurrency) throws SQLException {
			return null;
		}
		public CallableStatement prepareCall(String sql) throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql,
				int resultSetType, int resultSetConcurrency,
				int resultSetHoldability) throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql,
				int resultSetType, int resultSetConcurrency)
				throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql,
				int autoGeneratedKeys) throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql,
				int[] columnIndexes) throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql,
				String[] columnNames) throws SQLException {
			return null;
		}
		public PreparedStatement prepareStatement(String sql)
				throws SQLException {
			return null;
		}
		public void releaseSavepoint(Savepoint savepoint) throws SQLException {
			
		}
		public void rollback() throws SQLException {
			
		}
		public void rollback(Savepoint savepoint) throws SQLException {
			
		}
		public void setAutoCommit(boolean autoCommit) throws SQLException {
			
		}
		public void setCatalog(String catalog) throws SQLException {
			
		}
		public void setHoldability(int holdability) throws SQLException {
			
		}
		public void setReadOnly(boolean readOnly) throws SQLException {
			
		}
		public Savepoint setSavepoint() throws SQLException {
			return null;
		}
		public Savepoint setSavepoint(String name) throws SQLException {
			return null;
		}
		public void setTransactionIsolation(int level) throws SQLException {
			
		}
		public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		}

		@Override
		public Array createArrayOf(String typeName, Object[] elements)
				throws SQLException {
			return null;
		}

		@Override
		public Blob createBlob() throws SQLException {
			return null;
		}

		@Override
		public Clob createClob() throws SQLException {
			return null;
		}

		@Override
		public NClob createNClob() throws SQLException {
			return null;
		}

		@Override
		public SQLXML createSQLXML() throws SQLException {
			return null;
		}

		@Override
		public Struct createStruct(String typeName, Object[] attributes)
				throws SQLException {
			return null;
		}

		@Override
		public Properties getClientInfo() throws SQLException {
			return null;
		}

		@Override
		public String getClientInfo(String name) throws SQLException {
			return null;
		}

		@Override
		public boolean isValid(int timeout) throws SQLException {
			return false;
		}

		@Override
		public void setClientInfo(Properties properties)
				throws SQLClientInfoException {
			
		}

		@Override
		public void setClientInfo(String name, String value)
				throws SQLClientInfoException {
			
		}

		@Override
		public boolean isWrapperFor(Class<?> iface) throws SQLException {
			return false;
		}

		@Override
		public <T> T unwrap(Class<T> iface) throws SQLException {
			return null;
		}//

		@Override
		public void abort(Executor executor) throws SQLException {
			
		}

		@Override
		public int getNetworkTimeout() throws SQLException {
			return 0;
		}

		@Override
		public String getSchema() throws SQLException {
			return null;
		}

		@Override
		public void setNetworkTimeout(Executor executor, int milliseconds)
				throws SQLException {
			
		}

		@Override
		public void setSchema(String schema) throws SQLException {
			
		}
	}//MyConnection  内部类结束

	//---------------------------------------------//
	@Override
	public Connection getConnection(String username, String password)
			throws SQLException {
		return null;
	}
	@Override
	public PrintWriter getLogWriter() throws SQLException {
		return null;
	}
	@Override
	public int getLoginTimeout() throws SQLException {
		return 0;
	}
	@Override
	public void setLogWriter(PrintWriter arg0) throws SQLException {

	}
	@Override
	public void setLoginTimeout(int arg0) throws SQLException {

	}
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}
	@Override
	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
		return null;
	}

}
